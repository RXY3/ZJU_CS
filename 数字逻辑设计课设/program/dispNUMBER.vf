////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : dispNUMBER.vf
// /___/   /\     Timestamp : 12/29/2023 15:17:48
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath D:/vga/ipcore_dir -intstyle ise -family kintex7 -verilog D:/vga/dispNUMBER.vf -w D:/vga/dispNUMBER.sch
//Design Name: dispNUMBER
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module INV4_HXILINX_dispNUMBER (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_dispNUMBER (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 1ns / 1ps

module MyMC14495_MUSER_dispNUMBER(D0, 
                                  D1, 
                                  D2, 
                                  D3, 
                                  LE, 
                                  point, 
                                  a, 
                                  b, 
                                  c, 
                                  d, 
                                  e, 
                                  f, 
                                  g, 
                                  p);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output p;
   
   wire XLXN_13;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_50;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_64;
   wire XLXN_66;
   wire XLXN_69;
   wire XLXN_72;
   wire XLXN_73;
   wire XLXN_76;
   
   INV  XLXI_4 (.I(point), 
               .O(p));
   OR2  XLXI_5 (.I0(LE), 
               .I1(XLXN_13), 
               .O(g));
   OR2  XLXI_6 (.I0(LE), 
               .I1(XLXN_20), 
               .O(f));
   OR2  XLXI_7 (.I0(LE), 
               .I1(XLXN_21), 
               .O(e));
   OR2  XLXI_8 (.I0(LE), 
               .I1(XLXN_22), 
               .O(d));
   OR2  XLXI_9 (.I0(LE), 
               .I1(XLXN_23), 
               .O(c));
   OR2  XLXI_10 (.I0(LE), 
                .I1(XLXN_24), 
                .O(b));
   OR2  XLXI_11 (.I0(LE), 
                .I1(XLXN_25), 
                .O(a));
   OR3  XLXI_12 (.I0(XLXN_26), 
                .I1(XLXN_27), 
                .I2(XLXN_50), 
                .O(XLXN_13));
   AND4  XLXI_13 (.I0(XLXN_76), 
                 .I1(XLXN_73), 
                 .I2(D2), 
                 .I3(D3), 
                 .O(XLXN_26));
   AND4  XLXI_14 (.I0(D0), 
                 .I1(D1), 
                 .I2(D2), 
                 .I3(XLXN_69), 
                 .O(XLXN_27));
   AND4  XLXI_22 (.I0(XLXN_76), 
                 .I1(D1), 
                 .I2(XLXN_72), 
                 .I3(D3), 
                 .O(XLXN_52));
   AND4  XLXI_25 (.I0(XLXN_76), 
                 .I1(D1), 
                 .I2(XLXN_72), 
                 .I3(XLXN_69), 
                 .O(XLXN_57));
   AND4  XLXI_29 (.I0(D0), 
                 .I1(XLXN_73), 
                 .I2(D2), 
                 .I3(XLXN_69), 
                 .O(XLXN_64));
   AND4  XLXI_30 (.I0(D0), 
                 .I1(D1), 
                 .I2(XLXN_72), 
                 .I3(D3), 
                 .O(XLXN_66));
   AND4  XLXI_31 (.I0(D0), 
                 .I1(XLXN_73), 
                 .I2(D2), 
                 .I3(D3), 
                 .O(XLXN_41));
   AND4  XLXI_32 (.I0(XLXN_76), 
                 .I1(XLXN_73), 
                 .I2(D2), 
                 .I3(XLXN_69), 
                 .O(XLXN_54));
   AND4  XLXI_33 (.I0(D0), 
                 .I1(XLXN_72), 
                 .I2(XLXN_73), 
                 .I3(XLXN_69), 
                 .O(XLXN_55));
   OR3  XLXI_35 (.I0(XLXN_42), 
                .I1(XLXN_43), 
                .I2(XLXN_44), 
                .O(XLXN_21));
   OR3  XLXI_37 (.I0(XLXN_56), 
                .I1(XLXN_57), 
                .I2(XLXN_58), 
                .O(XLXN_23));
   OR4  XLXI_40 (.I0(XLXN_37), 
                .I1(XLXN_38), 
                .I2(XLXN_39), 
                .I3(XLXN_41), 
                .O(XLXN_20));
   OR4  XLXI_41 (.I0(XLXN_52), 
                .I1(XLXN_53), 
                .I2(XLXN_54), 
                .I3(XLXN_55), 
                .O(XLXN_22));
   AND3  XLXI_42 (.I0(XLXN_73), 
                 .I1(XLXN_72), 
                 .I2(XLXN_69), 
                 .O(XLXN_50));
   AND3  XLXI_43 (.I0(D0), 
                 .I1(D1), 
                 .I2(XLXN_69), 
                 .O(XLXN_37));
   AND3  XLXI_44 (.I0(D1), 
                 .I1(XLXN_72), 
                 .I2(XLXN_69), 
                 .O(XLXN_38));
   AND3  XLXI_45 (.I0(D0), 
                 .I1(XLXN_72), 
                 .I2(XLXN_69), 
                 .O(XLXN_39));
   AND3  XLXI_47 (.I0(D0), 
                 .I1(XLXN_73), 
                 .I2(XLXN_72), 
                 .O(XLXN_42));
   AND3  XLXI_48 (.I0(XLXN_73), 
                 .I1(D2), 
                 .I2(XLXN_69), 
                 .O(XLXN_43));
   AND2  XLXI_49 (.I0(D0), 
                 .I1(XLXN_69), 
                 .O(XLXN_44));
   AND3  XLXI_50 (.I0(D0), 
                 .I1(D1), 
                 .I2(D2), 
                 .O(XLXN_53));
   AND3  XLXI_51 (.I0(D1), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_56));
   AND3  XLXI_52 (.I0(D0), 
                 .I1(D1), 
                 .I2(D3), 
                 .O(XLXN_61));
   AND3  XLXI_53 (.I0(XLXN_76), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_58));
   OR4  XLXI_54 (.I0(XLXN_61), 
                .I1(XLXN_58), 
                .I2(XLXN_62), 
                .I3(XLXN_64), 
                .O(XLXN_24));
   AND3  XLXI_55 (.I0(XLXN_76), 
                 .I1(D1), 
                 .I2(D2), 
                 .O(XLXN_62));
   OR4  XLXI_56 (.I0(XLXN_66), 
                .I1(XLXN_41), 
                .I2(XLXN_54), 
                .I3(XLXN_55), 
                .O(XLXN_25));
   INV  XLXI_57 (.I(D3), 
                .O(XLXN_69));
   INV  XLXI_59 (.I(D2), 
                .O(XLXN_72));
   INV  XLXI_60 (.I(D1), 
                .O(XLXN_73));
   INV  XLXI_62 (.I(D0), 
                .O(XLXN_76));
endmodule
`timescale 1ns / 1ps

module Mux4to1_MUSER_dispNUMBER(I0, 
                                I1, 
                                I2, 
                                I3, 
                                s, 
                                o);

    input I0;
    input I1;
    input I2;
    input I3;
    input [1:0] s;
   output o;
   
   wire XLXN_2;
   wire XLXN_4;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_25;
   wire XLXN_26;
   
   INV  XLXI_3 (.I(s[1]), 
               .O(XLXN_2));
   INV  XLXI_4 (.I(s[0]), 
               .O(XLXN_4));
   AND2  XLXI_5 (.I0(XLXN_4), 
                .I1(XLXN_2), 
                .O(XLXN_12));
   AND2  XLXI_6 (.I0(s[0]), 
                .I1(XLXN_2), 
                .O(XLXN_13));
   AND2  XLXI_7 (.I0(s[1]), 
                .I1(XLXN_4), 
                .O(XLXN_14));
   AND2  XLXI_8 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_15));
   AND2  XLXI_9 (.I0(I0), 
                .I1(XLXN_12), 
                .O(XLXN_21));
   AND2  XLXI_10 (.I0(I1), 
                 .I1(XLXN_13), 
                 .O(XLXN_22));
   AND2  XLXI_11 (.I0(I2), 
                 .I1(XLXN_14), 
                 .O(XLXN_25));
   AND2  XLXI_12 (.I0(I3), 
                 .I1(XLXN_15), 
                 .O(XLXN_26));
   OR4  XLXI_13 (.I0(XLXN_26), 
                .I1(XLXN_25), 
                .I2(XLXN_22), 
                .I3(XLXN_21), 
                .O(o));
endmodule
`timescale 1ns / 1ps

module Mux4to1b4_MUSER_dispNUMBER(I0, 
                                  I1, 
                                  I2, 
                                  I3, 
                                  s, 
                                  o);

    input [3:0] I0;
    input [3:0] I1;
    input [3:0] I2;
    input [3:0] I3;
    input [1:0] s;
   output [3:0] o;
   
   wire XLXN_5;
   wire XLXN_7;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_40;
   wire XLXN_45;
   wire XLXN_48;
   
   INV  XLXI_1 (.I(s[0]), 
               .O(XLXN_7));
   INV  XLXI_2 (.I(s[1]), 
               .O(XLXN_5));
   AND2  XLXI_3 (.I0(XLXN_7), 
                .I1(XLXN_5), 
                .O(XLXN_37));
   AND2  XLXI_4 (.I0(s[0]), 
                .I1(XLXN_5), 
                .O(XLXN_40));
   AND2  XLXI_5 (.I0(s[1]), 
                .I1(XLXN_7), 
                .O(XLXN_45));
   AND2  XLXI_6 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_48));
   AND2  XLXI_7 (.I0(I0[0]), 
                .I1(XLXN_37), 
                .O(XLXN_19));
   AND2  XLXI_8 (.I0(I1[0]), 
                .I1(XLXN_40), 
                .O(XLXN_22));
   AND2  XLXI_9 (.I0(I2[0]), 
                .I1(XLXN_45), 
                .O(XLXN_21));
   AND2  XLXI_10 (.I0(I3[0]), 
                 .I1(XLXN_48), 
                 .O(XLXN_20));
   OR4  XLXI_11 (.I0(XLXN_20), 
                .I1(XLXN_21), 
                .I2(XLXN_22), 
                .I3(XLXN_19), 
                .O(o[0]));
   AND2  XLXI_12 (.I0(I0[1]), 
                 .I1(XLXN_37), 
                 .O(XLXN_23));
   AND2  XLXI_13 (.I0(I1[1]), 
                 .I1(XLXN_40), 
                 .O(XLXN_24));
   AND2  XLXI_14 (.I0(I2[1]), 
                 .I1(XLXN_45), 
                 .O(XLXN_25));
   AND2  XLXI_15 (.I0(I3[1]), 
                 .I1(XLXN_48), 
                 .O(XLXN_28));
   AND2  XLXI_16 (.I0(I0[2]), 
                 .I1(XLXN_37), 
                 .O(XLXN_29));
   AND2  XLXI_17 (.I0(I1[2]), 
                 .I1(XLXN_40), 
                 .O(XLXN_30));
   AND2  XLXI_19 (.I0(I2[2]), 
                 .I1(XLXN_45), 
                 .O(XLXN_31));
   AND2  XLXI_20 (.I0(I3[2]), 
                 .I1(XLXN_48), 
                 .O(XLXN_32));
   AND2  XLXI_21 (.I0(I0[3]), 
                 .I1(XLXN_37), 
                 .O(XLXN_33));
   AND2  XLXI_22 (.I0(I1[3]), 
                 .I1(XLXN_40), 
                 .O(XLXN_34));
   AND2  XLXI_23 (.I0(I2[3]), 
                 .I1(XLXN_45), 
                 .O(XLXN_35));
   AND2  XLXI_24 (.I0(I3[3]), 
                 .I1(XLXN_48), 
                 .O(XLXN_36));
   OR4  XLXI_25 (.I0(XLXN_28), 
                .I1(XLXN_25), 
                .I2(XLXN_24), 
                .I3(XLXN_23), 
                .O(o[1]));
   OR4  XLXI_26 (.I0(XLXN_32), 
                .I1(XLXN_31), 
                .I2(XLXN_30), 
                .I3(XLXN_29), 
                .O(o[2]));
   OR4  XLXI_27 (.I0(XLXN_36), 
                .I1(XLXN_35), 
                .I2(XLXN_34), 
                .I3(XLXN_33), 
                .O(o[3]));
endmodule
`timescale 1ns / 1ps

module DispNum_Num_MUSER_dispNUMBER(Hexs, 
                                    LES, 
                                    point, 
                                    Scan, 
                                    AN, 
                                    HEX, 
                                    LE, 
                                    p);

    input [15:0] Hexs;
    input [3:0] LES;
    input [3:0] point;
    input [1:0] Scan;
   output [3:0] AN;
   output [3:0] HEX;
   output LE;
   output p;
   
   wire XLXN_28;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   
   Mux4to1b4_MUSER_dispNUMBER  XLXI_1 (.I0(Hexs[3:0]), 
                                      .I1(Hexs[7:4]), 
                                      .I2(Hexs[11:8]), 
                                      .I3(Hexs[15:12]), 
                                      .s(Scan[1:0]), 
                                      .o(HEX[3:0]));
   Mux4to1_MUSER_dispNUMBER  XLXI_3 (.I0(point[0]), 
                                    .I1(point[1]), 
                                    .I2(point[2]), 
                                    .I3(point[3]), 
                                    .s(Scan[1:0]), 
                                    .o(p));
   Mux4to1_MUSER_dispNUMBER  XLXI_4 (.I0(LES[0]), 
                                    .I1(LES[1]), 
                                    .I2(LES[2]), 
                                    .I3(LES[3]), 
                                    .s(Scan[1:0]), 
                                    .o(LE));
   (* HU_SET = "XLXI_5_0" *) 
   D2_4E_HXILINX_dispNUMBER  XLXI_5 (.A0(Scan[0]), 
                                    .A1(Scan[1]), 
                                    .E(XLXN_28), 
                                    .D0(XLXN_41), 
                                    .D1(XLXN_40), 
                                    .D2(XLXN_39), 
                                    .D3(XLXN_38));
   VCC  XLXI_6 (.P(XLXN_28));
   (* HU_SET = "XLXI_11_1" *) 
   INV4_HXILINX_dispNUMBER  XLXI_11 (.I0(XLXN_38), 
                                    .I1(XLXN_39), 
                                    .I2(XLXN_40), 
                                    .I3(XLXN_41), 
                                    .O0(AN[3]), 
                                    .O1(AN[2]), 
                                    .O2(AN[1]), 
                                    .O3(AN[0]));
endmodule
`timescale 1ns / 1ps

module dispNUMBER(clk, 
                  HEXS, 
                  LES, 
                  points, 
                  RST, 
                  AN, 
                  Segment);

    input clk;
    input [15:0] HEXS;
    input [3:0] LES;
    input [3:0] points;
    input RST;
   output [3:0] AN;
   output [7:0] Segment;
   
   wire [31:0] clkd;
   wire [3:0] HEX;
   wire XLXN_15;
   wire XLXN_16;
   
   clkdiv  XLXI_1 (.clk(clk), 
                  .rst(RST), 
                  .clkdiv(clkd[31:0]));
   DispNum_Num_MUSER_dispNUMBER  XLXI_2 (.Hexs(HEXS[15:0]), 
                                        .LES(LES[3:0]), 
                                        .point(points[3:0]), 
                                        .Scan(clkd[18:17]), 
                                        .AN(AN[3:0]), 
                                        .HEX(HEX[3:0]), 
                                        .LE(XLXN_16), 
                                        .p(XLXN_15));
   MyMC14495_MUSER_dispNUMBER  XLXI_3 (.D0(HEX[0]), 
                                      .D1(HEX[1]), 
                                      .D2(HEX[2]), 
                                      .D3(HEX[3]), 
                                      .LE(XLXN_16), 
                                      .point(XLXN_15), 
                                      .a(Segment[0]), 
                                      .b(Segment[1]), 
                                      .c(Segment[2]), 
                                      .d(Segment[3]), 
                                      .e(Segment[4]), 
                                      .f(Segment[5]), 
                                      .g(Segment[6]), 
                                      .p(Segment[7]));
endmodule
